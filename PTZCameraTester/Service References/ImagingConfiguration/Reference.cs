//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PTZCameraTester.ImagingConfiguration {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", ConfigurationName="ImagingConfiguration.ImagingConfigurationPortType")]
    public interface ImagingConfigurationPortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/CalibrateNow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CalibrateNow();
        
        // CODEGEN: Parameter 'CalibrationDelay' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/DelayRecalibration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PTZCameraTester.ImagingConfiguration.DelayRecalibrationResponse DelayRecalibration(PTZCameraTester.ImagingConfiguration.DelayRecalibrationRequest request);
        
        // CODEGEN: Parameter 'CalibrationInterval' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/GetCalibrationInterval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="CalibrationInterval")]
        PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalResponse GetCalibrationInterval(PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalRequest request);
        
        // CODEGEN: Parameter 'CalibrationInterval' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/SetCalibrationInterval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalResponse SetCalibrationInterval(PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalRequest request);
        
        // CODEGEN: Parameter 'ImageEnhancementLevel' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/GetImageEnhancementLevel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ImageEnhancementLevel")]
        PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelResponse GetImageEnhancementLevel(PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelRequest request);
        
        // CODEGEN: Parameter 'ImageEnhancementLevel' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/SetImageEnhancementLevel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelResponse SetImageEnhancementLevel(PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelRequest request);
        
        // CODEGEN: Parameter 'Sharpness' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/GetSharpness", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Sharpness")]
        PTZCameraTester.ImagingConfiguration.GetSharpnessResponse GetSharpness(PTZCameraTester.ImagingConfiguration.GetSharpnessRequest request);
        
        // CODEGEN: Parameter 'Sharpness' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/SetSharpness", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PTZCameraTester.ImagingConfiguration.SetSharpnessResponse SetSharpness(PTZCameraTester.ImagingConfiguration.SetSharpnessRequest request);
        
        // CODEGEN: Parameter 'RecalibrationMode' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/GetRecalibrationMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RecalibrationMode")]
        PTZCameraTester.ImagingConfiguration.GetRecalibrationModeResponse GetRecalibrationMode(PTZCameraTester.ImagingConfiguration.GetRecalibrationModeRequest request);
        
        // CODEGEN: Parameter 'RecalibrationMode' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/SetRecalibrationMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PTZCameraTester.ImagingConfiguration.SetRecalibrationModeResponse SetRecalibrationMode(PTZCameraTester.ImagingConfiguration.SetRecalibrationModeRequest request);
        
        // CODEGEN: Parameter 'ColorPalette' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/GetColorPalette", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ColorPalette")]
        PTZCameraTester.ImagingConfiguration.GetColorPaletteResponse GetColorPalette(PTZCameraTester.ImagingConfiguration.GetColorPaletteRequest request);
        
        // CODEGEN: Parameter 'ColorPalette' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/GetAllColorPalettes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ColorPalette")]
        PTZCameraTester.ImagingConfiguration.GetAllColorPalettesResponse GetAllColorPalettes(PTZCameraTester.ImagingConfiguration.GetAllColorPalettesRequest request);
        
        // CODEGEN: Parameter 'ColorPalette' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pelco.com/api/ImagingConfiguration/1/SetColorPalette", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PTZCameraTester.ImagingConfiguration.SetColorPaletteResponse SetColorPalette(PTZCameraTester.ImagingConfiguration.SetColorPaletteRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DelayRecalibration", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class DelayRecalibrationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public string CalibrationDelay;
        
        public DelayRecalibrationRequest() {
        }
        
        public DelayRecalibrationRequest(string CalibrationDelay) {
            this.CalibrationDelay = CalibrationDelay;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DelayRecalibrationResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class DelayRecalibrationResponse {
        
        public DelayRecalibrationResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalibrationInterval", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetCalibrationIntervalRequest {
        
        public GetCalibrationIntervalRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalibrationIntervalResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetCalibrationIntervalResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public string CalibrationInterval;
        
        public GetCalibrationIntervalResponse() {
        }
        
        public GetCalibrationIntervalResponse(string CalibrationInterval) {
            this.CalibrationInterval = CalibrationInterval;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCalibrationInterval", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetCalibrationIntervalRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public string CalibrationInterval;
        
        public SetCalibrationIntervalRequest() {
        }
        
        public SetCalibrationIntervalRequest(string CalibrationInterval) {
            this.CalibrationInterval = CalibrationInterval;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCalibrationIntervalResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetCalibrationIntervalResponse {
        
        public SetCalibrationIntervalResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetImageEnhancementLevel", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetImageEnhancementLevelRequest {
        
        public GetImageEnhancementLevelRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetImageEnhancementLevelResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetImageEnhancementLevelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ImageEnhancementLevel;
        
        public GetImageEnhancementLevelResponse() {
        }
        
        public GetImageEnhancementLevelResponse(int ImageEnhancementLevel) {
            this.ImageEnhancementLevel = ImageEnhancementLevel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetImageEnhancementLevel", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetImageEnhancementLevelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ImageEnhancementLevel;
        
        public SetImageEnhancementLevelRequest() {
        }
        
        public SetImageEnhancementLevelRequest(int ImageEnhancementLevel) {
            this.ImageEnhancementLevel = ImageEnhancementLevel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetImageEnhancementLevelResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetImageEnhancementLevelResponse {
        
        public SetImageEnhancementLevelResponse() {
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1")]
    public partial class ModeValuePair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ModeValuePairMode modeField;
        
        private int valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public ModeValuePairMode Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
                this.RaisePropertyChanged("Mode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public int Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.pelco.com/api/ImagingConfiguration/1")]
    public enum ModeValuePairMode {
        
        /// <remarks/>
        Manual,
        
        /// <remarks/>
        Automatic,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSharpness", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetSharpnessRequest {
        
        public GetSharpnessRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSharpnessResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetSharpnessResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PTZCameraTester.ImagingConfiguration.ModeValuePair Sharpness;
        
        public GetSharpnessResponse() {
        }
        
        public GetSharpnessResponse(PTZCameraTester.ImagingConfiguration.ModeValuePair Sharpness) {
            this.Sharpness = Sharpness;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetSharpness", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetSharpnessRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PTZCameraTester.ImagingConfiguration.ModeValuePair Sharpness;
        
        public SetSharpnessRequest() {
        }
        
        public SetSharpnessRequest(PTZCameraTester.ImagingConfiguration.ModeValuePair Sharpness) {
            this.Sharpness = Sharpness;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetSharpnessResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetSharpnessResponse {
        
        public SetSharpnessResponse() {
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1")]
    public enum RecalibrationMode {
        
        /// <remarks/>
        Auto,
        
        /// <remarks/>
        Periodic,
        
        /// <remarks/>
        Manual,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRecalibrationMode", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetRecalibrationModeRequest {
        
        public GetRecalibrationModeRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRecalibrationModeResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetRecalibrationModeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PTZCameraTester.ImagingConfiguration.RecalibrationMode RecalibrationMode;
        
        public GetRecalibrationModeResponse() {
        }
        
        public GetRecalibrationModeResponse(PTZCameraTester.ImagingConfiguration.RecalibrationMode RecalibrationMode) {
            this.RecalibrationMode = RecalibrationMode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetRecalibrationMode", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetRecalibrationModeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PTZCameraTester.ImagingConfiguration.RecalibrationMode RecalibrationMode;
        
        public SetRecalibrationModeRequest() {
        }
        
        public SetRecalibrationModeRequest(PTZCameraTester.ImagingConfiguration.RecalibrationMode RecalibrationMode) {
            this.RecalibrationMode = RecalibrationMode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetRecalibrationModeResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetRecalibrationModeResponse {
        
        public SetRecalibrationModeResponse() {
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1")]
    public enum ColorPalette {
        
        /// <remarks/>
        WhiteHot,
        
        /// <remarks/>
        Rainbow,
        
        /// <remarks/>
        BlackHot,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetColorPalette", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetColorPaletteRequest {
        
        public GetColorPaletteRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetColorPaletteResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetColorPaletteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PTZCameraTester.ImagingConfiguration.ColorPalette ColorPalette;
        
        public GetColorPaletteResponse() {
        }
        
        public GetColorPaletteResponse(PTZCameraTester.ImagingConfiguration.ColorPalette ColorPalette) {
            this.ColorPalette = ColorPalette;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllColorPalettes", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetAllColorPalettesRequest {
        
        public GetAllColorPalettesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllColorPalettesResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class GetAllColorPalettesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ColorPalette", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ColorPalette[] ColorPalette;
        
        public GetAllColorPalettesResponse() {
        }
        
        public GetAllColorPalettesResponse(ColorPalette[] ColorPalette) {
            this.ColorPalette = ColorPalette;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetColorPalette", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetColorPaletteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.pelco.com/api/ImagingConfiguration/1", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PTZCameraTester.ImagingConfiguration.ColorPalette ColorPalette;
        
        public SetColorPaletteRequest() {
        }
        
        public SetColorPaletteRequest(PTZCameraTester.ImagingConfiguration.ColorPalette ColorPalette) {
            this.ColorPalette = ColorPalette;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetColorPaletteResponse", WrapperNamespace="http://www.pelco.com/api/ImagingConfiguration/1", IsWrapped=true)]
    public partial class SetColorPaletteResponse {
        
        public SetColorPaletteResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ImagingConfigurationPortTypeChannel : PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImagingConfigurationPortTypeClient : System.ServiceModel.ClientBase<PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType>, PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType {
        
        public ImagingConfigurationPortTypeClient() {
        }
        
        public ImagingConfigurationPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImagingConfigurationPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImagingConfigurationPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImagingConfigurationPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CalibrateNow() {
            base.Channel.CalibrateNow();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.DelayRecalibrationResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.DelayRecalibration(PTZCameraTester.ImagingConfiguration.DelayRecalibrationRequest request) {
            return base.Channel.DelayRecalibration(request);
        }
        
        public void DelayRecalibration(string CalibrationDelay) {
            PTZCameraTester.ImagingConfiguration.DelayRecalibrationRequest inValue = new PTZCameraTester.ImagingConfiguration.DelayRecalibrationRequest();
            inValue.CalibrationDelay = CalibrationDelay;
            PTZCameraTester.ImagingConfiguration.DelayRecalibrationResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).DelayRecalibration(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.GetCalibrationInterval(PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalRequest request) {
            return base.Channel.GetCalibrationInterval(request);
        }
        
        public string GetCalibrationInterval() {
            PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalRequest inValue = new PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalRequest();
            PTZCameraTester.ImagingConfiguration.GetCalibrationIntervalResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).GetCalibrationInterval(inValue);
            return retVal.CalibrationInterval;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.SetCalibrationInterval(PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalRequest request) {
            return base.Channel.SetCalibrationInterval(request);
        }
        
        public void SetCalibrationInterval(string CalibrationInterval) {
            PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalRequest inValue = new PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalRequest();
            inValue.CalibrationInterval = CalibrationInterval;
            PTZCameraTester.ImagingConfiguration.SetCalibrationIntervalResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).SetCalibrationInterval(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.GetImageEnhancementLevel(PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelRequest request) {
            return base.Channel.GetImageEnhancementLevel(request);
        }
        
        public int GetImageEnhancementLevel() {
            PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelRequest inValue = new PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelRequest();
            PTZCameraTester.ImagingConfiguration.GetImageEnhancementLevelResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).GetImageEnhancementLevel(inValue);
            return retVal.ImageEnhancementLevel;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.SetImageEnhancementLevel(PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelRequest request) {
            return base.Channel.SetImageEnhancementLevel(request);
        }
        
        public void SetImageEnhancementLevel(int ImageEnhancementLevel) {
            PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelRequest inValue = new PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelRequest();
            inValue.ImageEnhancementLevel = ImageEnhancementLevel;
            PTZCameraTester.ImagingConfiguration.SetImageEnhancementLevelResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).SetImageEnhancementLevel(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.GetSharpnessResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.GetSharpness(PTZCameraTester.ImagingConfiguration.GetSharpnessRequest request) {
            return base.Channel.GetSharpness(request);
        }
        
        public PTZCameraTester.ImagingConfiguration.ModeValuePair GetSharpness() {
            PTZCameraTester.ImagingConfiguration.GetSharpnessRequest inValue = new PTZCameraTester.ImagingConfiguration.GetSharpnessRequest();
            PTZCameraTester.ImagingConfiguration.GetSharpnessResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).GetSharpness(inValue);
            return retVal.Sharpness;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.SetSharpnessResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.SetSharpness(PTZCameraTester.ImagingConfiguration.SetSharpnessRequest request) {
            return base.Channel.SetSharpness(request);
        }
        
        public void SetSharpness(PTZCameraTester.ImagingConfiguration.ModeValuePair Sharpness) {
            PTZCameraTester.ImagingConfiguration.SetSharpnessRequest inValue = new PTZCameraTester.ImagingConfiguration.SetSharpnessRequest();
            inValue.Sharpness = Sharpness;
            PTZCameraTester.ImagingConfiguration.SetSharpnessResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).SetSharpness(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.GetRecalibrationModeResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.GetRecalibrationMode(PTZCameraTester.ImagingConfiguration.GetRecalibrationModeRequest request) {
            return base.Channel.GetRecalibrationMode(request);
        }
        
        public PTZCameraTester.ImagingConfiguration.RecalibrationMode GetRecalibrationMode() {
            PTZCameraTester.ImagingConfiguration.GetRecalibrationModeRequest inValue = new PTZCameraTester.ImagingConfiguration.GetRecalibrationModeRequest();
            PTZCameraTester.ImagingConfiguration.GetRecalibrationModeResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).GetRecalibrationMode(inValue);
            return retVal.RecalibrationMode;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.SetRecalibrationModeResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.SetRecalibrationMode(PTZCameraTester.ImagingConfiguration.SetRecalibrationModeRequest request) {
            return base.Channel.SetRecalibrationMode(request);
        }
        
        public void SetRecalibrationMode(PTZCameraTester.ImagingConfiguration.RecalibrationMode RecalibrationMode) {
            PTZCameraTester.ImagingConfiguration.SetRecalibrationModeRequest inValue = new PTZCameraTester.ImagingConfiguration.SetRecalibrationModeRequest();
            inValue.RecalibrationMode = RecalibrationMode;
            PTZCameraTester.ImagingConfiguration.SetRecalibrationModeResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).SetRecalibrationMode(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.GetColorPaletteResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.GetColorPalette(PTZCameraTester.ImagingConfiguration.GetColorPaletteRequest request) {
            return base.Channel.GetColorPalette(request);
        }
        
        public PTZCameraTester.ImagingConfiguration.ColorPalette GetColorPalette() {
            PTZCameraTester.ImagingConfiguration.GetColorPaletteRequest inValue = new PTZCameraTester.ImagingConfiguration.GetColorPaletteRequest();
            PTZCameraTester.ImagingConfiguration.GetColorPaletteResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).GetColorPalette(inValue);
            return retVal.ColorPalette;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.GetAllColorPalettesResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.GetAllColorPalettes(PTZCameraTester.ImagingConfiguration.GetAllColorPalettesRequest request) {
            return base.Channel.GetAllColorPalettes(request);
        }
        
        public ColorPalette[] GetAllColorPalettes() {
            PTZCameraTester.ImagingConfiguration.GetAllColorPalettesRequest inValue = new PTZCameraTester.ImagingConfiguration.GetAllColorPalettesRequest();
            PTZCameraTester.ImagingConfiguration.GetAllColorPalettesResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).GetAllColorPalettes(inValue);
            return retVal.ColorPalette;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PTZCameraTester.ImagingConfiguration.SetColorPaletteResponse PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType.SetColorPalette(PTZCameraTester.ImagingConfiguration.SetColorPaletteRequest request) {
            return base.Channel.SetColorPalette(request);
        }
        
        public void SetColorPalette(PTZCameraTester.ImagingConfiguration.ColorPalette ColorPalette) {
            PTZCameraTester.ImagingConfiguration.SetColorPaletteRequest inValue = new PTZCameraTester.ImagingConfiguration.SetColorPaletteRequest();
            inValue.ColorPalette = ColorPalette;
            PTZCameraTester.ImagingConfiguration.SetColorPaletteResponse retVal = ((PTZCameraTester.ImagingConfiguration.ImagingConfigurationPortType)(this)).SetColorPalette(inValue);
        }
    }
}
